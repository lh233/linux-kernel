diff --git a/drivers/power/qpnp-linear-charger.c b/drivers/power/qpnp-linear-charger.c
old mode 100755
new mode 100644
index 17cb205..8186805
--- a/drivers/power/qpnp-linear-charger.c
+++ b/drivers/power/qpnp-linear-charger.c
@@ -27,6 +27,9 @@
 #include <linux/debugfs.h>
 #include <linux/io.h>
 #include <linux/gpio.h>
+#include <linux/of_gpio.h>
+#include <linux/regulator/consumer.h>
+
 
 //N3 红灯使用gpio16控制，没有使用pmu的gpio口
 #define RED_LED_GPIO (911+16)
@@ -39,6 +42,13 @@ static int red_led_value = 0;
 #endif
 #endif
 
+
+#define GPIO_TRUE 0
+#define GPIO_FALSE 1
+extern int charge_full_flag;
+
+#define CHARGE_GPIO_OUTPUT(pin,level)      gpio_direction_output(pin,level)
+
 #define CREATE_MASK(NUM_BITS, POS) \
 	((unsigned char) (((1 << (NUM_BITS)) - 1) << (POS)))
 #define LBC_MASK(MSB_BIT, LSB_BIT) \
@@ -142,7 +152,7 @@ static int red_led_value = 0;
 
 #define QPNP_CHARGER_DEV_NAME	"qcom,qpnp-linear-charger"
 
-#define DEBUG false
+#define DEBUG true
 //#define GREEN_LED_GPIO 911+15
 
 /* usb_interrupts */
@@ -265,6 +275,15 @@ struct vddtrim_map vddtrim_map[] = {
 	{-25440,	0x07},
 };
 
+
+int enable_chg_gpio;
+extern int first_battery_full_flag;
+volatile unsigned int usbin_charger_flag = 0;//ljt
+extern volatile unsigned int otg_vout_flag;//ljt
+extern int eg2805_read_voltage(void);
+extern int eg2805_read_temp(void);
+
+
 /*
  * struct qpnp_lbc_chip - device information
  * @dev:			device pointer to access the parent
@@ -384,6 +403,8 @@ struct qpnp_lbc_chip {
 	int				delta_vddmax_uv;
 	int				init_trim_uv;
 	struct delayed_work		collapsible_detection_work;
+	int				enable_chg_gpio;
+	int 			charging;
 
 	/* parallel-chg params */
 	int				parallel_charging_enabled;
@@ -690,17 +711,25 @@ static int qpnp_lbc_charger_enable(struct qpnp_lbc_chip *chip, int reason,
 	u8 reg_val;
 	int rc = 0;
 
-	pr_debug("reason=%d requested_enable=%d disabled_status=%d\n",
+	pr_err("reason=%d requested_enable=%d disabled_status=%d\n",
 					reason, enable, disabled);
-	if (enable)
+	if (enable) {
+		//屏蔽在某些情况下，在充满电掉电的时候，使能充电管脚，只由bms来控制
+		if(!charge_full_flag)
+			CHARGE_GPIO_OUTPUT(chip->enable_chg_gpio, GPIO_TRUE);
 		disabled &= ~reason;
-	else
+	}
+	else {
+		CHARGE_GPIO_OUTPUT(chip->enable_chg_gpio, GPIO_FALSE);
 		disabled |= reason;
+	}
 
 	if (!!chip->charger_disabled == !!disabled)
 		goto skip;
 
-	reg_val = !!disabled ? CHG_FORCE_BATT_ON : CHG_ENABLE;
+	//reg_val = !!disabled ? CHG_FORCE_BATT_ON : CHG_ENABLE;
+	reg_val = CHG_FORCE_BATT_ON;
+
 	rc = qpnp_lbc_masked_write(chip, chip->chgr_base + CHG_CTRL_REG,
 				CHG_EN_MASK, reg_val);
 	if (rc) {
@@ -1137,7 +1166,7 @@ static void qpnp_lbc_chgr_led_brightness_set(struct led_classdev *cdev,
 		printk("Failed to write charger led rc=%d\n", rc);
 	#else
 	/*N3 use gpio 16*/
-	printk("qpnp_lbc_chgr_led_brightness_set set red value = %d\n",value);
+	pr_debug("qpnp_lbc_chgr_led_brightness_set set red value = %d\n",value);
 	if(value>0){
   		red_led_value = 255;
 	} else{
@@ -1320,12 +1349,12 @@ static int get_prop_charge_type(struct qpnp_lbc_chip *chip)
 	if (!get_prop_batt_present(chip))
 		return POWER_SUPPLY_CHARGE_TYPE_NONE;
 
-	rc = qpnp_lbc_read(chip, chip->chgr_base + INT_RT_STS_REG,
-				&reg_val, 1);
-	if (rc) {
-		pr_err("Failed to read interrupt sts %d\n", rc);
-		return POWER_SUPPLY_CHARGE_TYPE_NONE;
-	}
+//	rc = qpnp_lbc_read(chip, chip->chgr_base + INT_RT_STS_REG,
+//				&reg_val, 1);
+//	if (rc) {
+//		pr_err("Failed to read interrupt sts %d\n", rc);
+//		return POWER_SUPPLY_CHARGE_TYPE_NONE;
+//	}
 
 	/*disable charger when otg insert*/
     if(qpnp_lbc_is_usb_chg_plugged_in(chip))
@@ -1335,7 +1364,7 @@ static int get_prop_charge_type(struct qpnp_lbc_chip *chip)
 			return POWER_SUPPLY_CHARGE_TYPE_NONE;	
      }
 
-	if (reg_val & FAST_CHG_ON_IRQ)
+	if (usbin_charger_flag)
 		return POWER_SUPPLY_CHARGE_TYPE_FAST;
 	
 	return POWER_SUPPLY_CHARGE_TYPE_NONE;
@@ -1346,7 +1375,7 @@ static int get_prop_batt_status(struct qpnp_lbc_chip *chip)
 	int rc;
 	u8 reg_val;
     union power_supply_propval ret = {0,};
-	if (qpnp_lbc_is_usb_chg_plugged_in(chip) && chip->chg_done)
+	if (qpnp_lbc_is_usb_chg_plugged_in(chip) && chip->chg_done && first_battery_full_flag)
 		return POWER_SUPPLY_STATUS_FULL;
 
 	rc = qpnp_lbc_read(chip, chip->chgr_base + INT_RT_STS_REG,
@@ -1362,7 +1391,8 @@ static int get_prop_batt_status(struct qpnp_lbc_chip *chip)
 			return POWER_SUPPLY_STATUS_DISCHARGING;
 	}
 	
-	if (reg_val & FAST_CHG_ON_IRQ)
+	
+	if (qpnp_lbc_is_usb_chg_plugged_in(chip) && !otg_vout_flag)
 		return POWER_SUPPLY_STATUS_CHARGING;
 
 	return POWER_SUPPLY_STATUS_DISCHARGING;
@@ -1463,7 +1493,7 @@ static void qpnp_lbc_set_appropriate_current(struct qpnp_lbc_chip *chip)
 			chip->thermal_mitigation[chip->therm_lvl_sel]);
 
 	pr_debug("setting charger current %d mA\n", chg_current);
-	qpnp_lbc_ibatmax_set(chip, chg_current);
+	qpnp_lbc_ibatmax_set(chip, 0);
 }
 
 static void qpnp_batt_external_power_changed(struct power_supply *psy)
@@ -1784,10 +1814,10 @@ static int qpnp_batt_power_get_property(struct power_supply *psy,
 		val->intval = chip->cfg_min_voltage_mv * 1000;
 		break;
 	case POWER_SUPPLY_PROP_VOLTAGE_NOW:
-		val->intval = get_prop_battery_voltage_now(chip);
+		val->intval = eg2805_read_voltage();
 		break;
 	case POWER_SUPPLY_PROP_TEMP:
-		val->intval = get_prop_batt_temp(chip);
+		val->intval = eg2805_read_temp();
 		break;
 	case POWER_SUPPLY_PROP_COOL_TEMP:
 		val->intval = chip->cfg_cool_bat_decidegc;
@@ -1833,7 +1863,7 @@ static void qpnp_lbc_parallel_work(struct work_struct *work)
 			goto exit_work;
 		}
 		chip->ichg_now = temp;
-		qpnp_lbc_ibatmax_set(chip, chip->ichg_now);
+		qpnp_lbc_ibatmax_set(chip, 0);
 		pr_debug("ichg_now increased to %d\n", chip->ichg_now);
 	}
 
@@ -1853,7 +1883,7 @@ static int qpnp_lbc_parallel_charging_config(struct qpnp_lbc_chip *chip,
 	if (enable) {
 		/* Prevent sleep until charger is configured */
 		chip->ichg_now = QPNP_LBC_IBATMAX_MIN;
-		qpnp_lbc_ibatmax_set(chip, chip->ichg_now);
+		qpnp_lbc_ibatmax_set(chip, 0);
 		qpnp_lbc_charger_enable(chip, PARALLEL, 1);
 		pm_stay_awake(chip->dev);
 		schedule_delayed_work(&chip->parallel_work, VINMIN_DELAY);
@@ -2187,7 +2217,7 @@ static int qpnp_lbc_usb_path_init(struct qpnp_lbc_chip *chip)
 		 * Enable charging explictly,
 		 * because not sure the default behavior.
 		 */
-		reg_val = CHG_ENABLE;
+		reg_val = CHG_FORCE_BATT_ON;
 		rc = qpnp_lbc_masked_write(chip, chip->chgr_base + CHG_CTRL_REG,
 					CHG_EN_MASK, reg_val);
 		if (rc)
@@ -2439,6 +2469,17 @@ static int qpnp_charger_read_dt_props(struct qpnp_lbc_chip *chip)
 			of_property_read_bool(chip->spmi->dev.of_node,
 					"qcom,collapsible-chgr-support");
 
+
+	chip->enable_chg_gpio = of_get_named_gpio(chip->spmi->dev.of_node,		\
+				"qcom,charging-enable-gpio",		\
+					0);
+	
+	if (!gpio_is_valid(chip->enable_chg_gpio)) {
+        pr_err("Invalid GPIO, enable_chg_gpio:%d",
+            chip->enable_chg_gpio);
+        return -EINVAL;
+    }
+
 	/* Disable charging when faking battery values */
 	if (chip->cfg_use_fake_battery)
 		chip->cfg_charging_disabled = true;
@@ -2505,6 +2546,27 @@ static int qpnp_charger_read_dt_props(struct qpnp_lbc_chip *chip)
 	return rc;
 }
 
+
+static int sy6982f_request_io_port(struct qpnp_lbc_chip *chip)
+{
+	s32 ret = 0;
+
+	ret = gpio_request(chip->enable_chg_gpio, "SY6982F_ENABLE_CHG_GPIO");
+	if (ret < 0) {
+		pr_err("Failed to request GPIO:%d, ERRNO:%d", (s32) chip->enable_chg_gpio, ret);
+		ret = -ENODEV;
+	} else {
+		CHARGE_GPIO_OUTPUT(chip->enable_chg_gpio, GPIO_FALSE);
+		enable_chg_gpio = chip->enable_chg_gpio;
+	}
+
+	if (ret < 0) {
+		gpio_free(chip->enable_chg_gpio);
+	}
+
+	return ret;
+}
+
 #define CHG_REMOVAL_DETECT_DLY_MS	300
 static irqreturn_t qpnp_lbc_chg_gone_irq_handler(int irq, void *_chip)
 {
@@ -2538,8 +2600,7 @@ static irqreturn_t qpnp_lbc_chg_gone_irq_handler(int irq, void *_chip)
 
 	return IRQ_HANDLED;
 }
-volatile unsigned int usbin_charger_flag = 0;//ljt
-extern volatile unsigned int otg_vout_flag;//ljt
+
 static irqreturn_t qpnp_lbc_usbin_valid_irq_handler(int irq, void *_chip)
 {
 	struct qpnp_lbc_chip *chip = _chip;
@@ -2561,6 +2622,8 @@ static irqreturn_t qpnp_lbc_usbin_valid_irq_handler(int irq, void *_chip)
 	}
 //ljt
 
+	pr_err("usbin_charger_flag = %d, otg_vout_flag = %d\n", usbin_charger_flag, otg_vout_flag);
+	
     if(usb_present){
 		chip->usb_psy->get_property(chip->usb_psy, POWER_SUPPLY_PROP_SCOPE, &ret);
 		    /*Otg mode don't charging*/
@@ -2723,7 +2786,7 @@ static irqreturn_t qpnp_lbc_fastchg_irq_handler(int irq, void *_chip)
 
 	
 	if(DEBUG)
-		printk("[%s]: fastchg_on: %d\n",__FUNCTION__, fastchg_on);
+		pr_err("[%s]: fastchg_on: %d\n",__FUNCTION__, fastchg_on);
 	#if 0
 	//aaron add ，添加usb或外部充电器插入或者拔出时候，控制led灯亮/灭
 	if(fastchg_on==1){
@@ -3339,6 +3402,12 @@ static int qpnp_lbc_main_probe(struct spmi_device *spmi)
 		return rc;
 	}
 
+	rc = sy6982f_request_io_port(chip);
+	if (rc) {
+		pr_err("Failed to request gpio rc=%d\n", rc);
+		return rc;
+	}
+
 	rc = qpnp_lbc_parse_resources(chip);
 	if (rc) {
 		pr_err("Unable to parse LBC resources rc=%d\n", rc);
